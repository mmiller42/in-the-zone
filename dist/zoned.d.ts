export type ZonedDateConstructor<T extends string = string> = ReturnType<typeof zoned<T>>;
export declare function zoned<T extends string>(timeZone: T): {
    new (): {
        readonly "__#1@#fullYear": number;
        readonly "__#1@#month": number;
        readonly "__#1@#date": number;
        readonly "__#1@#day": number;
        readonly "__#1@#hours": number;
        readonly "__#1@#minutes": number;
        readonly "__#1@#seconds": number;
        readonly "__#1@#milliseconds": number;
        readonly "__#1@#timezoneOffset": number;
        readonly "__#1@#dateString": string;
        readonly "__#1@#timeString": string;
        readonly "__#1@#string": string;
        getFullYear(): number;
        getMonth(): number;
        getDate(): number;
        getDay(): number;
        getHours(): number;
        getMinutes(): number;
        getSeconds(): number;
        getMilliseconds(): number;
        getTimezoneOffset(): number;
        toDateString(): string;
        toTimeString(): string;
        toString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        setFullYear(): never;
        setMonth(): never;
        setDate(): never;
        setHours(): never;
        setMinutes(): never;
        setSeconds(): never;
        setMilliseconds(): never;
        setTime(): never;
        setUTCFullYear(): never;
        setUTCMonth(): never;
        setUTCDate(): never;
        setUTCHours(): never;
        setUTCMinutes(): never;
        setUTCSeconds(): never;
        setUTCMilliseconds(): never;
        valueOf(): number;
        getTime(): number;
        getUTCFullYear(): number;
        getUTCMonth(): number;
        getUTCDate(): number;
        getUTCDay(): number;
        getUTCHours(): number;
        getUTCMinutes(): number;
        getUTCSeconds(): number;
        getUTCMilliseconds(): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        getVarDate: () => VarDate;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
    new (time: number | string | Date): {
        readonly "__#1@#fullYear": number;
        readonly "__#1@#month": number;
        readonly "__#1@#date": number;
        readonly "__#1@#day": number;
        readonly "__#1@#hours": number;
        readonly "__#1@#minutes": number;
        readonly "__#1@#seconds": number;
        readonly "__#1@#milliseconds": number;
        readonly "__#1@#timezoneOffset": number;
        readonly "__#1@#dateString": string;
        readonly "__#1@#timeString": string;
        readonly "__#1@#string": string;
        getFullYear(): number;
        getMonth(): number;
        getDate(): number;
        getDay(): number;
        getHours(): number;
        getMinutes(): number;
        getSeconds(): number;
        getMilliseconds(): number;
        getTimezoneOffset(): number;
        toDateString(): string;
        toTimeString(): string;
        toString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        setFullYear(): never;
        setMonth(): never;
        setDate(): never;
        setHours(): never;
        setMinutes(): never;
        setSeconds(): never;
        setMilliseconds(): never;
        setTime(): never;
        setUTCFullYear(): never;
        setUTCMonth(): never;
        setUTCDate(): never;
        setUTCHours(): never;
        setUTCMinutes(): never;
        setUTCSeconds(): never;
        setUTCMilliseconds(): never;
        valueOf(): number;
        getTime(): number;
        getUTCFullYear(): number;
        getUTCMonth(): number;
        getUTCDate(): number;
        getUTCDay(): number;
        getUTCHours(): number;
        getUTCMinutes(): number;
        getUTCSeconds(): number;
        getUTCMilliseconds(): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        getVarDate: () => VarDate;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
    getTimezone(): T;
    zoned<T_1 extends string>(timezone: T_1): ZonedDateConstructor<T_1>;
    parse(s: string): number;
    UTC(year: number, monthIndex: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;
    UTC(year: number, monthIndex?: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;
    now(): number;
};
